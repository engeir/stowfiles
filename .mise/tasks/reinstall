#!/usr/bin/env bash

#MISE description="Re-install software listed in the repo."
#USAGE flag "-h --help" help="Print this help message and exit"
#USAGE flag "-f --from <system>" help="Choose which system list to install from" {
#USAGE   choices "INSTALLED-linux" "INSTALLED-mac"
#USAGE }
#USAGE arg "[package-manager]" help="The package manager to install from" {
#USAGE   choices "apt" "cargo" "flatpak" "fonts" "go" "nvim-norsk-spelllang" "pacstall" "snap" "tlmgr" "uv"
#USAGE }

usage() {
    echo "Usage: $0 <package-manager>"
    echo "Supported package managers:"
    echo "  apt"
    echo "  cargo"
    echo "  flatpak"
    echo "  fonts"
    echo "  go"
    echo "  nvim-norsk-spelllang"
    echo "  pacstall"
    echo "  snap"
    echo "  tlmgr"
    echo "  uv"
    exit 0
}
# If -h or --help is passed as an argument, print usage and exit
[[ $1 == "-h" || $1 == "--help" ]] && usage
[[ $# -eq 0 ]] && usage
# Check if an accepted language package provider is used as first argument
run-installer() {
    echo "No installer has been set up yet."
}
case "$1" in
    "fonts")
        run-installer() {
            fonts-install
            exit 0
        }
        ;;
    "nvim-norsk-spelllang")
        run-installer() {
            nvim-spell-install
            exit 0
        }
        ;;
    "tlmgr")
        run-installer() {
            tlmgr-install
            exit 0
        }
        ;;
    "cargo")
        run-installer() {
            cargo-install
            exit 0
        }
        ;;
    "uv")
        run-installer() {
            uv-install
            exit 0
        }
        ;;
    "apt")
        run-installer() {
            apt-get-install
            exit 0
        }
        ;;
    "pacstall")
        run-installer() {
            pacstall-install
            exit 0
        }
        ;;
    "go") ;;
    "flatpak") ;;
    "snap")
        run-installer() {
            snap-install
            exit 0
        }
        ;;
    *)
        echo "$1 is not a valid package manager"
        exit 1
        ;;
esac
unameOut="$(uname -s)"
case "$unameOut" in
    Linux*) file=INSTALLED-linux.md ;;
    Darwin*) file=INSTALLED-mac.md ;;
    *)
        echo "No INSTALLED file for $unameOut"
        exit 0
        ;;
esac

list="$(sed -n '/^```txt {'"$1"'}/,/^```/ p' <"$file" | sed '/^```/ d')"
font-caskaydia-install() {
    if ! command -v getnf >/dev/null 2>&1; then
        echo "To install fonts, first install 'getnf' from"
        echo "https://github.com/getnf/getnf"
        exit 1
    fi
    getnf -i CascadiaMono
}
font-cartograph-install() {
    # if ! grep -q "$HOME/.local/share/fonts" <(fc-list); then
    #     echo "I am only able to install fonts into $HOME/.local/share/fonts/. Sorry!"
    #     exit 1
    # fi
    TMPDIR="/tmp/font-$RANDOM"
    mkdir -p "$TMPDIR"
    cd "$TMPDIR" || exit
    git clone https://github.com/g5becks/Cartograph.git
    rm -rf Cartograph/.git/
    mv Cartograph "$HOME/.local/share/fonts/"
    fc-cache
}
fonts-install() {
    if ! grep "Cartograph CF.*Italic" -q <(fc-list); then
        echo "Cartograph CF, Italic style is not installed."
        font-cartograph-install
    fi
    if ! grep "CaskaydiaMono Nerd Font Mono.*Bold" -q <(fc-list); then
        echo "CaskaydiaMono Nerd Font Mono, Bold style is not installed."
        font-caskaydia-install
    fi
    if ! grep "CaskaydiaMono Nerd Font Mono.*Regular" -q <(fc-list); then
        echo "CaskaydiaMono Nerd Font Mono, Regular style is not installed."
        font-caskaydia-install
    fi
}
nvim-spell-install() {
    # Check if the spell files already exists.
    if [[ -f "$HOME/.config/nvim/spell/nb.utf-8.spl" ]]; then
        exit 0
    fi
    wget https://downloads.sourceforge.net/project/aoo-extensions/1216/2/dictionary-no-no-2.2.oxt && mv dictionary-no-no-2.2.oxt "$HOME/Downloads/" || exit 1
    cd "$HOME/Downloads/" || exit 1
    unzip dictionary-no-no-2.2.oxt -d dictionary-no-no-2.2
    mkdir -p "$HOME/.config/nvim/spell/"
    mv "$HOME/Downloads/dictionary-no-no-2.2/DICT/nb_NO.aff" "$HOME/.config/nvim/spell/nb.aff"
    mv "$HOME/Downloads/dictionary-no-no-2.2/DICT/nb_NO.dic" "$HOME/.config/nvim/spell/nb.dic"
    mv "$HOME/Downloads/dictionary-no-no-2.2/DICT/nn_NO.aff" "$HOME/.config/nvim/spell/nn.aff"
    mv "$HOME/Downloads/dictionary-no-no-2.2/DICT/nn_NO.dic" "$HOME/.config/nvim/spell/nn.dic"
    rm -rf "$HOME/Downloads/dictionary-no-no-2.2"
    rm "$HOME/Downloads/dictionary-no-no-2.2.oxt"
    nvim -c "mkspell $HOME/.config/nvim/spell/nb" -c "qa!"
    nvim -c "mkspell $HOME/.config/nvim/spell/nn" -c "qa!"
}
tlmgr-install() {
    # Do shit
    present="$(tlmgr list --only-installed)"
    not_installed="$(diff <(echo "$list") <(echo "$present") | grep -E '^<' | sed 's/^< //')"
    # Check if list is empty
    [[ -z $not_installed ]] && exit 0
    # Loop over each line of the list
    while IFS= read -r line; do
        package="$(echo "$line" | awk '{print $2}' | sed 's/://')"
        echo "Installing $package"
        tlmgr install "$package"
    done <<<"$not_installed"
}
uv-install() {
    # present="$(uv tool list | sed 's/- .*//' | sed '/^$/d' | sed 's/\s.*//')"
    present="$(uv tool list | sed 's/- .*//' | sed '/^$/d')"
    not_installed="$(diff <(echo "$list") <(echo "$present") | grep -E '^<' | sed 's/^< //')"
    # Check if list is empty
    [[ -z $not_installed ]] && exit 0
    # Loop over each line of the list
    while IFS= read -r line; do
        package="$(echo "$line" | awk '{print $1}' | sed 's/://')"
        echo "Installing $package"
        uv tool install --force-reinstall "$package"
    done <<<"$not_installed"
    errored="$(uv tool upgrade --force-reinstall --all 2>&1 | grep '^error' | sed 's/.*[[:blank:]]//')"
    while IFS= read -r line; do
        echo "Re-installing $line"
        uv tool install --force-reinstall "$line"
    done <<<"$errored"
}
nala-install-search() {
    package_name=$1
    if sudo nala install -y "$package_name"; then
        echo "Package '$package_name' installed successfully."
    else
        echo "Package '$package_name' not found. Searching for similar..."
        closest_match="$(apt-cache search "$package_name" | awk '{print $1}' | head -n 1)"
        if [ "$closest_match" != "" ]; then
            read -p "Did you mean '$closest_match'? [Y or n] " response
            response=${response,,}
            if [[ $response == "y" || $response == "" ]]; then
                sudo nala install -y "$closest_match"
            else
                echo "No package installed"
            fi
        else
            echo "No similar package found."
        fi
    fi
}
apt-get-install() {
    present="$(nala list -i | grep '^[a-z,A-Z]' | awk '{print $1}')"
    not_installed="$(diff <(echo "$list" | awk '{print $1}') <(echo "$present") | grep -E '^<' | sed 's/^< //')"
    [[ -z $not_installed ]] && exit 0
    # sudo nala install "$not_installed"
    while IFS= read -r line; do
        echo "Installing $line"
        nala-install-search "$line"
    done <<<"$not_installed"
}
pacstall-install-search() {
    package_name=$1
    if pacstall -P -I "$package_name"; then
        echo "Package '$package_name' installed successfully."
    elif pacstall -P -I "$package_name"-bin; then
        echo "Package '$package_name-bin' installed successfully."
    else
        echo "Package '$package_name' not found. Searching for similar..."
        closest_match="$(pacstall -S "$package_name" | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2};?)?)?[mGK]//g" | awk '{print $1}' | head -n 1)"
        if [ "$closest_match" != "" ]; then
            pacstall -P -I "$closest_match"
        else
            echo "No similar package found."
        fi
    fi
}
pacstall-install() {
    present="$(pacstall -L | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2};?)?)?[mGK]//g")"
    not_installed="$(diff <(echo "$list") <(echo "$present") | grep -E '^<' | sed 's/^< //')"
    [[ -z $not_installed ]] && exit 0
    # sudo nala install "$not_installed"
    while IFS= read -r line; do
        echo "Installing $line"
        pacstall-install-search "$line"
    done <<<"$not_installed"
}
cargo-install() {
    echo "Not implemented! (Use mise instead.)"
}
snap-install() {
    present="$(snap list | awk 'NR>1 {print $1}')"
    not_installed="$(diff <(echo "$list" | awk 'NR>1 {print $1}') <(echo "$present") | grep -E '^<' | sed 's/^< //')"
    [[ -z $not_installed ]] && exit 0
    while IFS= read -r line; do
        echo "Installing $line"
        sudo snap install "$line"
    done <<<"$not_installed"
}
run-installer
