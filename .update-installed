#!/bin/bash

# Updates a file called INSTALLED.md.
unameOut="$(uname -s)"
case "$unameOut" in
    Linux*) machine=Linux ;;
    Darwin*) machine=Mac ;;
    CYGWIN*) machine=Cygwin ;;
    MINGW*) machine=MinGw ;;
    *)
        machine="UNKNOWN:${unameOut}"
        ;;
esac

print_diff() {
    if ! command -v "riff" &>/dev/null; then
        # Use the standard diff program
        diff "$1" "$2" | less
    else
        # Use riff
        riff "$1" "$2"
    fi
    return 0
}
echo_and_run() {
    if ! command -v "$@" &>/dev/null; then
        return 0
    elif [[ $1 == "sudo" ]] && ! command -v "${@:2}" &>/dev/null; then
        return 0
    fi
    echo ""
    echo "\$ $*"
    "$@"
}
run_updates() {
    # Main package managers ------------------------------------------------------------
    echo_and_run brew update
    echo_and_run brew upgrade
    echo_and_run sudo snap refresh
    echo_and_run flatpak update -y
    echo_and_run sudo nala upgrade -y --update
    echo_and_run pacstall -U -P && echo_and_run pacstall -Up -P
    # Language specific bulk upgrades --------------------------------------------------
    echo_and_run rustup update
    echo_and_run cargo install-update -a
    # mise is updated also by the rust toolchain, so we place this after
    echo_and_run mise self-update -y && echo_and_run mise up -y && echo_and_run mise prune -y
    echo_and_run python3 -m pip install --user --upgrade pipx
    echo_and_run pipx upgrade-all
    # echo_and_run gup update
    # Single programs ------------------------------------------------------------------
    echo_and_run bob update --all
    echo_and_run bun upgrade
    echo_and_run dprint config --config ~/.config/dprint/dprint.jsonc update --yes
    # Only update poetry from itself if it was install via script, otherwise pipx does
    # it.
    grep -iq poetry <(pipx list) || echo_and_run poetry self update
    echo_and_run pyenv update
    echo_and_run sudo rclone selfupdate
    echo_and_run rye self update
    echo_and_run zap update all
}

try_fix_ppa() {
    if [ "$machine" = "Linux" ]; then
        echo "If you have an issue with apt/apt-get, where you get something like:"
        echo "E: The repository 'https://ppa.launchpadcontent.net/fontforge/fontforge/ubuntu jammy Release' does not have a Release file."
        echo "see https://askubuntu.com/a/1163224."
        echo "You might have success trying the equivalent of"
        echo '$ sudo add-apt-repository --remove ppa:fontforge/fontforge'
    else
        echo "This is only available on Linux-based systems."
    fi
}

HELP_TEXT="Script usage: $(basename "$0") [-u] [-f] [-h]

With no options, the script will only update the list of currently installed software.

Options:
    -u  Run all update commands before updating software lists
    -f  Print steps to fix APT error and exit
    -h  Print this help and exit"
# Handle options
while getopts 'ufh' OPTION; do
    case "$OPTION" in
        u)
            run_updates "$machine"
            ;;
        f)
            try_fix_ppa
            exit 0
            ;;
        h)
            echo "$HELP_TEXT"
            exit 0
            ;;
        ?)
            echo "$HELP_TEXT"
            exit 1
            ;;
    esac
done
# shift "$((OPTIND - 1))"

# Run MacOS updates
if [ "Mac" = "$machine" ]; then
    # Let us first make a copy of the current installed programs into a tmp directory
    cp ./INSTALLED-mac.md /tmp/INSTALLED-mac.md
    BREW="$(brew list --versions)"
    CARGO="$(cargo install --list)"
    PIPX="$(pipx list | sed '1,2d' | sed 's/^   //')"
    GO="$(cat ~/.default-go-packages)"
    echo "# Installed programs

## Brew

\`\`\`txt
$BREW
\`\`\`

## Cargo

\`\`\`txt
$CARGO
\`\`\`

## Pipx

\`\`\`txt
$PIPX
\`\`\`

## Go

\`\`\`txt
$GO
\`\`\`
    " >"./INSTALLED-mac.md"
    # Now, we print the diff between the previous installed programs and the currently
    # installed
    # print_diff /tmp/INSTALLED-mac.md ./INSTALLED-mac.md
fi

# Run Linux updates
if [ "Linux" = "$machine" ]; then
    # Let us first make a copy of the current installed programs into a tmp directory
    cp ./INSTALLED-linux.md /tmp/INSTALLED-linux.md
    APT="$(nala list -i | grep '^[a-z,A-Z]')"
    # Thanks to https://stackoverflow.com/a/18000433, formatting is removed
    PACSTALL="$(pacstall -L | xargs -L 1 pacstall -Qi 2>/dev/null | grep -E 'name|version' | paste -d ' ' - - | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2};?)?)?[mGK]//g")"
    CARGO="$(cargo install --list)"
    PIPX="$(pipx list | sed '1,2d' | sed 's/^\s\s\s//')"
    GO="$(cat ~/.default-go-packages)"
    FLAT="$(paste <(
        echo "Name"
        flatpak list --columns=name
    ) <(
        echo "Version"
        flatpak list --columns=version
    ) <(
        echo "Branch"
        flatpak list --columns=branch
    ) | pr -t -e40)"
    SNAP="$(snap list)"
    echo "# Installed programs

## Apt

\`\`\`txt
$APT
\`\`\`

## Pacstall

\`\`\`txt
$PACSTALL
\`\`\`

## Cargo

\`\`\`txt
$CARGO
\`\`\`

## Pipx

\`\`\`txt
$PIPX
\`\`\`

## Go

\`\`\`txt
$GO
\`\`\`

## Flatpak

\`\`\`txt
$FLAT
\`\`\`

## Snap

\`\`\`txt
$SNAP
\`\`\`
    " >"./INSTALLED-linux.md"
    # Now, we print the diff between the previous installed programs and the currently
    # installed
    # print_diff /tmp/INSTALLED-linux.md ./INSTALLED-linux.md
fi
