#!/bin/sh

# This script will compile or run another finishing operation on a document. I
# have this script run via vim.
#
# IMPORTANT: since this script is not run on the command line, some programs error out
# since they cannot write to stdout. In this case, direct stdout (and stderr) to
# /dev/null: ` >/dev/null 2>&1`.
#
# Compiles .tex. groff (.mom, .ms), .rmd, .md, .org.  Opens .sent files as sent
# presentations. Runs scripts based on extension or shebang.
#
# Note that .tex files which you wish to compile with XeLaTeX or other should have the
# string "xelatex" somewhere in a comment/command in the first 5 lines.
#
# The pandoc compiler depends on a working installation of pandoc, the citeproc library
# and pandoc-include (there are two versions, but the python program has more features).
# They should all be built against the same version of pandoc. Installing via cabal is
# probably the best option (apt version is too old!). For clean install, rename ~/.ghc and
# follow instructions at https://pandoc.org/installing.html#quick-cabal-method, then:
# pipx install pandoc-include

file=$(readlink -f "$1")
dir=${file%/*}
base="${file%.*}"
ext="${file##*.}"

if [ "$ext" != "py" ]; then
    cd "$dir" || exit 1
fi

textype() {
    command="pdflatex"
    (head -n5 "$file" | grep -qi 'xelatex') && command="xelatex"
    (head -n5 "$file" | grep -qi 'tectonic') && command="tectonic"
    if [ "$command" = "tectonic" ]; then
        tectonic -o "$dir" "$file" >/dev/null 2>&1
    else
        "$command" --output-directory="$dir" "$base" \
            && grep -qi addbibresource "$file" \
            && biber --input-directory "$dir" "$base" \
            && "$command" --output-directory="$dir" "$base" \
            && "$command" --output-directory="$dir" "$base"
    fi
}

case "$ext" in
    # Try to keep these cases in alphabetical order.
    [0-9]) preconv "$file" | refer -PS -e | groff -mandoc -T pdf >"$base".pdf ;;
    c) cc "$file" -o "$base" && "$base" ;;
    cpp) g++ "$file" -o "$base" && "$base" ;;
    cs) mcs "$file" && mono "$base".exe ;;
    d2) d2 --force-appendix --dark-theme 200 --theme 200 --sketch "$file" "$base".svg ;;
    go) go run "$file" ;;
    h) sudo make install ;;
    java) javac -d classes "$file" && java -cp classes "${1%.*}" ;;
    m) octave "$file" ;;
    md) # pandoc -t ms --highlight-style=kate -s -o "$base".pdf "$file" ;;
        choice=$(sed -n '/---/,/---/p' "$file" | grep kind | awk '{print $2}')
        shift=$(sed -n '/---/,/---/p' "$file" | grep shiftheadinglevelby | awk '{print $2}')
        if [ -z "$shift" ]; then shift=0; fi
        if [ "$choice" = "beamer" ]; then
            pandoc "$file" -t beamer -o "$base".pdf
        else
            # Not stopping the compilation just because of some warnings:
            # pandoc --citeproc --bibliography=/home/een023/science/ref/ref.bib "$file" --filter pandoc-eqnos --filter pandoc-include-code -s -o "$base".pdf > /dev/null 2>&1
            pandoc --citeproc --bibliography="$HOME"/science/ref/ref.bib "$file" --shift-heading-level-by="$shift" --filter pandoc-include -s -o "$base".pdf
        fi
        ;;
        # if  [ -x "$(command -v lowdown)" ]; then
        # lowdown -d nointem -e super "$file" -Tms | groff -mpdfmark -ms -kept > "$base".pdf
        # elif [ -x "$(command -v groffdown)" ]; then
        # groffdown -i "$file" | groff > "$base.pdf"
        # else
        # pandoc -t ms --highlight-style=kate -s -o "$base".pdf "$file"
        # fi ; ;;
    mom) preconv "$file" | refer -PS -e | groff -mom -kept -T pdf >"$base".pdf ;;
        # ms) preconv "$file" | refer -PS -e | groff -me -ms -kept -T pdf > "$base".pdf ;;
        # ms) preconv "$file" | refer -PS -e | groff -me -ms -p -kept -Tps | ps2pdf - "$base".pdf ;;
    ms) preconv "$file" | refer -PS -e -p ~/science/ref/bibliography | groff -me -ms -p -kept -Tps | ps2pdf - "$base".pdf ;;
    org) emacs "$file" --batch -u "$USER" -f org-latex-export-to-pdf ;;
    py) if [ "$(sed -n 's/^#!//p' "$file")" = "" ]; then
            if command -v mise >/dev/null 2>&1; then pre_cmd="mise exec -- python"; else pre_cmd="python"; fi
            eval "$pre_cmd" "$file"
    else "$(sed -n 's/^#!//p' "$file")" "$file"; fi ;;
    [rR]) Rscript "$file" ;;
    [rR]md) Rscript -e "rmarkdown::render('$file', quiet=TRUE)" ;;
    rs) cargo build ;;
    sass) sassc -a "$file" "$base.css" ;;
    scad) openscad -o "$base".stl "$file" ;;
    sent) sent "$file" ;;
        # sent) setsid -f sent "$file" 2>/dev/null ;;
    tex) textype "$file" ;;
    *) head -n1 "$file" | grep "^#!/" | sed "s/^#!//" | xargs -r -I % "$file" ;;
esac
