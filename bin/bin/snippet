#!/usr/bin/env bash

# This is `snippet`
#
# Optional arguments: `new` (default, create new snippet), `edit` (edit an existing
# snippet), and `delete` (delete an existing snippet).

set -euo pipefail

SNIP_DIR="$HOME/.local/share/snippets"
mkdir -p "$SNIP_DIR"

# Only markdown files are allowed here
# fd -E "*md" . "$SNIP_DIR" -X rm

ACTION="${1:-new}"

choose_file() {
    local files
    mapfile -t files < <(find "$SNIP_DIR" -maxdepth 1 -type f -name '*.md' -exec basename {} \;)

    if [[ ${#files[@]} -eq 0 ]]; then
        gum log --level error "No notes found."
        return 1
    fi

    gum filter \
        --placeholder "Type to search your snippets..." \
        --height 20 \
        --limit 1 \
        --prompt "â€º " \
        --fuzzy \
        "${files[@]}"
}

case "$ACTION" in
    new)
        while true; do
            FILENAME="$(gum input --placeholder="Give the file a name...")"
            # Check for blank input
            if [[ -z $FILENAME ]]; then
                gum confirm "No name provided. Try again?" || exit 1
                continue
            fi

            # Add .md extension if not present
            if [[ ${FILENAME##*.} != "md" ]]; then
                FILENAME="${FILENAME}.md"
            fi

            FULL_PATH="$SNIP_DIR/$FILENAME"

            if [[ -e $FULL_PATH ]]; then
                gum confirm "The file '$FILENAME' already exists. Edit it?" && {
                    gum write --placeholder "Edit your note..." <"$FULL_PATH" >"$FULL_PATH.$$" && mv "$FULL_PATH.$$" "$FULL_PATH"
                    echo "Note edited at $FULL_PATH"
                    exit 0
                }
                gum confirm "Try a different filename?" || exit 1
            else
                gum write --placeholder "What do you want to note down?" >"$FULL_PATH"
                echo "Note saved at $FULL_PATH"
                exit 0
            fi
        done
        ;;
    edit)
        FILE_TO_EDIT="$(choose_file)" || exit 1
        gum write --placeholder "Edit your note..." <"$SNIP_DIR/$FILE_TO_EDIT" >"$SNIP_DIR/$FILE_TO_EDIT.$$"
        mv "$SNIP_DIR/$FILE_TO_EDIT.$$" "$SNIP_DIR/$FILE_TO_EDIT"
        echo "Note edited at $SNIP_DIR/$FILE_TO_EDIT"
        ;;
    delete)
        FILE_TO_DELETE="$(choose_file)" || exit 1
        gum confirm "Really delete '$FILE_TO_DELETE'?" && {
            rm -f "$SNIP_DIR/$FILE_TO_DELETE"
            echo "Deleted: $SNIP_DIR/$FILE_TO_DELETE"
        }
        ;;
    prune)
        # Find likely gum write "temp" files (pattern: name.md.NNNNNN) in $SNIP_DIR
        temp_files=()
        while IFS= read -r -d '' f; do
            temp_files+=("$(basename "$f")")
        done < <(find "$SNIP_DIR" -maxdepth 1 -type f -regextype posix-egrep -regex ".*/[^/]+\.md\.[0-9]+" -print0)

        if [[ ${#temp_files[@]} -eq 0 ]]; then
            gum log --level info "No temporary/leftover snippet files found to prune."
            exit 0
        fi

        TO_DELETE=$(printf "%s\n" "${temp_files[@]}" | gum choose --no-limit --header="Orphaned snippet files (select to delete):")
        if [[ -z ${TO_DELETE:-} ]]; then
            gum log --level info "No files selected for deletion."
            exit 0
        fi

        gum confirm "Delete the selected files?" || exit 1
        # If multi-select, TO_DELETE may have multiple lines
        while IFS= read -r file; do
            if [[ -n $file ]]; then
                rm -f "$SNIP_DIR/$file"
                echo "Deleted: $SNIP_DIR/$file"
            fi
        done <<<"$TO_DELETE"
        ;;
    git)
        if [[ $# -lt 2 ]]; then
            echo "Usage: $0 git <subcommand> [args...]"
            echo "Available git subcommands: init, clone, push, pull, or any git command"
            exit 1
        fi

        GIT_SUBCOMMAND="${2}"
        shift 2

        case "$GIT_SUBCOMMAND" in
            init)
                if [[ -d "$SNIP_DIR/.git" ]]; then
                    gum log --level warn "Git repository already exists in $SNIP_DIR"
                    gum confirm "Reinitialize the repository?" || exit 0
                fi
                cd "$SNIP_DIR"
                git init
                gum log --level info "Git repository initialized in $SNIP_DIR"
                ;;
            clone)
                if [[ $# -lt 1 ]]; then
                    echo "Usage: $0 git clone <repository-url>"
                    exit 1
                fi
                REPO_URL="$1"

                if [[ -d "$SNIP_DIR/.git" ]]; then
                    gum log --level warn "Git repository already exists in $SNIP_DIR"
                    exit 1
                fi

                files_exist=false
                if [[ -n "$(ls -A "$SNIP_DIR" 2>/dev/null)" ]]; then
                    files_exist=true
                    gum log --level warn "Snippet directory is not empty"
                    gum confirm "Clone into existing directory? (may overwrite files)" || exit 1
                fi

                cd "$SNIP_DIR"
                if [[ $files_exist == true ]]; then
                    git clone "$REPO_URL" temp_clone
                    mv temp_clone/.git .
                    mv temp_clone/* . 2>/dev/null || true
                    mv temp_clone/.* . 2>/dev/null || true
                    rmdir temp_clone
                else
                    git clone "$REPO_URL" .
                fi
                gum log --level info "Repository cloned to $SNIP_DIR"
                ;;
            push)
                if [[ ! -d "$SNIP_DIR/.git" ]]; then
                    gum log --level error "Not a git repository. Run 'snippet git init' first."
                    exit 1
                fi
                cd "$SNIP_DIR"
                git add .
                git commit -m "auto-commit snippets" || gum log --level info "No changes to commit"
                git push "$@"
                ;;
            pull)
                if [[ ! -d "$SNIP_DIR/.git" ]]; then
                    gum log --level error "Not a git repository. Run 'snippet git init' first."
                    exit 1
                fi
                cd "$SNIP_DIR"
                git pull "$@"
                ;;
            *)
                if [[ ! -d "$SNIP_DIR/.git" ]]; then
                    gum log --level error "Not a git repository. Run 'snippet git init' first."
                    exit 1
                fi
                cd "$SNIP_DIR"
                git "$GIT_SUBCOMMAND" "$@"
                ;;
        esac
        ;;
    format)
        cd "$SNIP_DIR" >/dev/null 2>&1
        prettier --write ./**/*.md | grep -v "unchanged" && true
        cd - >/dev/null 2>&1
        ;;
    *)
        echo "Usage: $0 [new|edit|delete|prune|format|git]"
        echo ""
        echo "Actions:"
        echo "  new     - Create a new snippet (default)"
        echo "  edit    - Edit an existing snippet"
        echo "  delete  - Delete an existing snippet"
        echo "  prune   - Remove temporary/orphaned files"
        echo "  format  - Format all snippets with prettier"
        echo "  git     - Git operations in snippet directory"
        echo ""
        echo "Git usage: $0 git <command> [args...]"
        echo "  Common commands: init, clone <url>, push, pull, status, add, commit"
        exit 1
        ;;
esac
