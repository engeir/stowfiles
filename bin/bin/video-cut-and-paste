#!/usr/bin/env python3
"""Cut an mp4 video into several segments.

Use it by running::

    python video-cut-and-paste <file.txt
    video-cut-and-paste <file.txt

where file.txt contains information about what input file to use, what name the new
video should be saved to, and all start/stops in the source file.
"""


import sys
import subprocess
import pathlib
import tempfile


class RepetitionError(Exception):
    def __init__(self, message):
        self.msg = message
        super().__init__(message)


class FileNotSpecifiedError(Exception):
    def __init__(self, message):
        self.msg = message
        super().__init__(message)


def convert_time(value: str) -> float:
    """Convert from HH:MM:SS to seconds."""
    if ":" not in value:
        return float(value)
    h, m, s = map(int, value.split(":"))
    total_seconds = h * 3600 + m * 60 + s
    return float(total_seconds)


def create_times_tuples(
    times: list[tuple[float, float]], next_start: str, next_stop: str
) -> list[tuple[float, float]]:
    prev_value = 0.0 if next_start == "none" else convert_time(next_start)
    value = convert_time(next_stop)
    times.append((prev_value, value))
    return times


def find_field(field: str) -> str:
    for line in globals()["lines"]:
        if len(line.split()) != 2 or line.split()[0] not in [field]:
            continue
        return line.split()[1]
    raise FileNotSpecifiedError(f"No '{field}' field found")


def float2str(seconds):
    # Convert seconds to an integer
    total_seconds = int(seconds)

    # Calculate hours, minutes, and seconds
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    seconds = total_seconds % 60

    # Format the time string
    return f"{hours:02d}:{minutes:02d}:{seconds:02d}"


def main() -> None:
    """Cut an mp4 video into several segments.

    Use it by running::

        python video-cut-and-paste <file.txt

    where file.txt contains information about what input file to use, what name the new
    video should be saved to, and all start/stops in the source file.
    """
    editor: dict[str, pathlib.Path | dict] = {}
    save_file = None
    current_times: list[tuple[float, float]] = []
    next_start = "none"
    no_files = 0
    for line in sys.stdin:
        match line.split():
            case ["out", value]:
                save_file = pathlib.Path(value)
                editor["out"] = save_file
            case ["file", value]:
                if no_files:
                    editor["files"][f"file{no_files}"]["steps"] = current_times
                    current_times = []
                    next_start = "none"
                else:
                    editor["files"] = {}
                no_files += 1
                current_file = pathlib.Path(value)
                editor["files"][f"file{no_files}"] = {"name": current_file}
            case ["start", value]:
                if no_files == 0:
                    raise FileNotSpecifiedError(
                        "You must specify a 'file' before adding start and stops"
                    )
                next_start = value
            case ["stop", value]:
                if no_files == 0:
                    raise FileNotSpecifiedError(
                        "You must specify a 'file' before adding start and stops"
                    )
                current_times = create_times_tuples(current_times, next_start, value)
            case _:
                print("hmm", line)
    editor["files"][f"file{no_files}"]["steps"] = current_times
    if save_file is None:
        raise FileNotSpecifiedError("You must specify one 'out' file to save to.")
    TMP = tempfile.TemporaryDirectory()
    tmp_dir = pathlib.Path(TMP.name)
    with open(tmp_dir / "list.txt", "w") as f:
        for k_file, v_file in editor["files"].items():
            for step_num, (start, stop) in enumerate(v_file["steps"]):
                start_, stop_ = float2str(start), float2str(stop)
                tmp_name = f"{k_file}-{step_num}.mp4"
                file_name = v_file["name"]
                # fmt: off
                subprocess.call(
                    [
                        "ffmpeg", "-ss", start_, "-to", stop_, "-i",
                        file_name, "-c", "copy", tmp_dir / tmp_name,
                    ]
                )
                # fmt: on
                f.write("file " + str(tmp_dir / f"{tmp_name}\n"))
    # fmt: off
    subprocess.call(
        [
            "ffmpeg", "-y", "-f", "concat", "-safe", "0", "-i",
            str(tmp_dir / "list.txt"), "-c", "copy", editor["out"],
        ]
    )
    # fmt: on
    TMP.cleanup()


if __name__ == "__main__":
    main()
