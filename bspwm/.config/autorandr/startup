#!/usr/bin/env bash

ALL="$(bspc query --monitors --names)"
if grep -q "^eDP" <(echo "$ALL"); then
    internal_monitor=$(grep "^eDP" <(echo "$ALL"))
fi
if grep -q "^DP" <(echo "$ALL"); then
    external_monitor=$(grep "^DP" <(echo "$ALL"))
fi
if grep -q "^HDMI" <(echo "$ALL"); then
    external_monitor=$(grep "^HDMI" <(echo "$ALL"))
fi
# internal_monitor=eDP1
# external_monitor=DP-2

monitor_add() {
    desktops=7 # How many desktops to move to the second monitor

    for desktop in $(bspc query -D -m "$internal_monitor" | sed "$desktops"q); do
        bspc desktop "$desktop" --to-monitor "$external_monitor"
    done

    # Remove "Desktop" created by bspwm
    bspc desktop Desktop --remove
}

monitor_remove() {
    bspc monitor "$internal_monitor" -a Desktop # Temp desktop because one desktop required per monitor

    # Move everything to external monitor to reorder desktops
    for desktop in $(bspc query -D -m "$internal_monitor"); do
        bspc desktop "$desktop" --to-monitor "$external_monitor"
    done

    # Now move everything back to internal monitor
    bspc monitor "$external_monitor" -a Desktop # Temp desktop

    for desktop in $(bspc query -D -m "$external_monitor"); do
        bspc desktop "$desktop" --to-monitor "$internal_monitor"
    done

    bspc desktop Desktop --remove # Remove temp desktops
}

if xrandr -q | grep -q "$external_monitor connected"; then
    monitor_add
else
    monitor_remove
fi

feh --bg-fill --geometry -200 "$HOME/.cache/bspwm/wallpaper.jpg"
sleep 2
"$HOME/.config/polybar/launch.sh" &
