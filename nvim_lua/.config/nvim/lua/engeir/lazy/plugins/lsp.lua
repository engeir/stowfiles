return {}
-- [[ Configure LSP ]]
--  This function gets run when an LSP connects to a particular buffer.
-- local on_attach = function(_, bufnr)
--     local map = function(mode, keys, func, desc)
--         if desc then
--             desc = "LSP: " .. desc
--         end
--         vim.keymap.set(mode, keys, func, { buffer = bufnr, desc = desc })
--     end
--     local nmap = function(keys, func, desc)
--         map("n", keys, func, desc)
--     end
--     local imap = function(keys, func, desc)
--         map("i", keys, func, desc)
--     end
--     local xmap = function(keys, func, desc)
--         map("x", keys, func, desc)
--     end
--
--     -- Keymaps inspired by kickstart.nvim + lsp-zero
--     -- All default mapping set by lsp-zero:
--     -- https://github.com/VonHeikemen/lsp-zero.nvim/issues/15#issuecomment-1128842548
--
--     nmap("<leader>rn", vim.lsp.buf.rename, "[R]e[n]ame")
--     nmap("<leader>ca", vim.lsp.buf.code_action, "[C]ode [A]ction")
--     xmap("<leader>ca", "<cmd>lua vim.lsp.buf.range_code_action()<cr>", "Range [C]ode [A]ction")
--
--     nmap("gd", vim.lsp.buf.definition, "[G]oto [D]efinition")
--     nmap("gr", require("telescope.builtin").lsp_references, "[G]oto [R]eferences")
--     -- Telescope alternative to vim.lsp.buf.references
--     nmap("gt", vim.lsp.buf.type_definition, "[G]oto [T]ype Definition")
--     nmap("<leader>gi", vim.lsp.buf.implementation, "[G]oto [I]mplementation")
--     nmap("<leader>ds", require("telescope.builtin").lsp_document_symbols, "[D]ocument [S]ymbols")
--     nmap("<leader>ws", require("telescope.builtin").lsp_dynamic_workspace_symbols, "[W]orkspace [S]ymbols")
--
--     -- Diagnostics
--     nmap("gl", vim.diagnostic.open_float, "Open Float Diagnostics")
--     nmap("[d", vim.diagnostic.goto_prev, "Goto Next Diagnostics")
--     nmap("]d", vim.diagnostic.goto_next, "Goto Prev Diagnostics")
--     nmap("gsl", vim.diagnostic.setloclist, "[g] [S]et[l]oclist")
--
--     -- See `:help K` for why this keymap
--     nmap("K", vim.lsp.buf.hover, "Hover Documentation")
--     nmap("<C-h>", vim.lsp.buf.signature_help, "Signature Documentation")
--     imap("<C-h>", vim.lsp.buf.signature_help, "Signature Documentation")
--
--     -- Lesser used LSP functionality
--     nmap("gD", vim.lsp.buf.declaration, "[G]oto [D]eclaration")
--     nmap("<leader>wa", vim.lsp.buf.add_workspace_folder, "[W]orkspace [A]dd Folder")
--     nmap("<leader>wr", vim.lsp.buf.remove_workspace_folder, "[W]orkspace [R]emove Folder")
--     nmap("<leader>ws", vim.lsp.buf.workspace_symbol, "[W]orkspace [S]ymbol")
--     nmap("<leader>wl", function()
--         print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
--     end, "[W]orkspace [L]ist Folders")
--
--     -- Create a command `:Format` local to the LSP buffer
--     vim.api.nvim_buf_create_user_command(bufnr, "Format", function(_)
--         if vim.lsp.buf.format then
--             vim.lsp.buf.format({ timeout_ms = 5000 })
--         elseif vim.lsp.buf.formatting then
--             vim.lsp.buf.formatting({ timeout_ms = 5000 })
--         end
--     end, { desc = "Format current buffer with LSP" })
--     nmap("<leader>s", "<cmd>Format<CR>", "Format")
-- end

-- return {
    -- Additional lua configuration, makes nvim stuff amazing!
    -- { "folke/neodev.nvim", config = true },
    -- {
    --     "williamboman/mason.nvim",
    --     build = ":MasonUpdate",
    --     config = true,
    -- },
    -- {
    --     "williamboman/mason-lspconfig.nvim",
    --     event = { "BufReadPre", "BufNewFile" },
    --     dependencies = {
    --         { "neovim/nvim-lspconfig", event = { "BufReadPre", "BufNewFile" } },
    --         { "hrsh7th/cmp-nvim-lsp" },
    --     },
    --     config = function()
    --         -- nvim-cmp supports additional completion capabilities, so broadcast that to servers
    --         local capabilities = vim.lsp.protocol.make_client_capabilities()
    --         -- capabilities.textDocument.completion.completionItem.snippetSupport = true
    --         capabilities = require("cmp_nvim_lsp").default_capabilities(capabilities)
    --
    --         local signs = {
    --             { name = "DiagnosticSignError", text = "" },
    --             { name = "DiagnosticSignWarn", text = "▲" },
    --             { name = "DiagnosticSignHint", text = "" },
    --             { name = "DiagnosticSignInfo", text = "" },
    --         }
    --
    --         for _, sign in ipairs(signs) do
    --             vim.fn.sign_define(sign.name, { texthl = sign.name, text = sign.text, numhl = "" })
    --         end
    --         -- Ensure the servers above are installed
    --         local mason_lspconfig = require("mason-lspconfig")
    --
    --         -- mason_lspconfig.setup {
    --         --   ensure_installed = vim.tbl_keys(servers),
    --         -- }
    --
    --         local config = {
    --             virtual_text = false, -- disable virtual text
    --             signs = {
    --                 active = signs,   -- show signs
    --             },
    --             update_in_insert = true,
    --             underline = true,
    --             severity_sort = true,
    --             float = {
    --                 focusable = true,
    --                 style = "minimal",
    --                 -- border = "rounded",
    --                 source = "always",
    --                 -- header = "",
    --                 -- prefix = "",
    --             },
    --         }
    --         mason_lspconfig.setup(config)
    --
    --         vim.diagnostic.config(config)
    --         -- vim.lsp.handlers["textDocument/hover"] = vim.lsp.with(vim.lsp.handlers.hover, {
    --         --     border = "rounded",
    --         -- })
    --         vim.lsp.handlers["textDocument/signatureHelp"] = vim.lsp.with(vim.lsp.handlers.signature_help, {
    --             border = "rounded",
    --         })
    --
    --         mason_lspconfig.setup_handlers({
    --             function(server_name)
    --                 require("lspconfig")[server_name].setup({
    --                     capabilities = capabilities,
    --                     on_attach = on_attach,
    --                     -- settings = servers[server_name],
    --                     -- filetypes = (servers[server_name] or {}).filetypes,
    --                 })
    --             end,
    --         })
    --     end,
    -- },
-- }
