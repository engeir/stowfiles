#!/usr/bin/env bash

# bash functions

# aptfind () {
#     apt list --all-versions | awk -F/ '{print "$1"}' | fzf --multi --preview 'apt show {1}'
# }

peek() {
    # cat a file that is on PATH
    cat "$(which "$1")"
}
compdef _whereis peek

nvp() {
    # edit a file that is on PATH
    if [ -z "$1" ]; then
        echo "Usage: edit a file on PATH with neovim. Any argument that works with whereis works with nvp as well."
    else
        nvim "$(which "$1")"
    fi
}
compdef _whereis nvp

batdiff() {
    if [ "$1" = "--staged" ]; then
        git diff --staged --name-only --diff-filter=d | xargs -I % sh -c "git diff --staged % | bat"
    else
        git diff --name-only --diff-filter=d | xargs bat --diff
    fi
}

pdf-reduce() {
    # From
    # https://askubuntu.com/questions/113544/how-can-i-reduce-the-file-size-of-a-scanned-pdf-file
    gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook -dNOPAUSE -dQUIET -dBATCH -sOutputFile=output.pdf "$1"
}

# Change cursor for vi modes:
zle_keymap_select() {
    if [[ $KEYMAP == vicmd ]] ||
        [[ $1 = 'block' ]]; then
        echo -ne '\e[1 q'
    elif [[ $KEYMAP == main ]] ||
        [[ $KEYMAP == viins ]] ||
        [[ $KEYMAP = '' ]] ||
        [[ $1 = 'beam' ]]; then
        echo -ne '\e[5 q'
    fi
}
zle -N zle_keymap_select
zle_line_init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle_line_init
echo -ne '\e[5 q'                # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q'; } # Use beam shape cursor for each new prompt.

nn() {
    # Block nesting of nnn in subshells
    if [ -n "$NNNLVL" ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi
    # The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set)
    # To cd on quit only on ^G, remove the "export" as in:
    #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    # NOTE: NNN_TMPFILE is fixed, should not be modified
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef
    nnn -d "$@"
    if [ -f "$NNN_TMPFILE" ]; then
        # shellcheck source=/dev/null
        . "$NNN_TMPFILE"
        rm -f "$NNN_TMPFILE" >/dev/null
    fi
}

nnn_preview() {
    # Block nesting of nnn in subshells
    if [ -n "$NNNLVL" ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi
    # The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set)
    # To cd on quit only on ^G, remove the "export" as in:
    #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    # NOTE: NNN_TMPFILE is fixed, should not be modified
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    # This will create a fifo where all nnn selections will be written to
    NNN_FIFO="$(mktemp --suffix=-nnn -u)"
    export NNN_FIFO
    (
        umask 077
        mkfifo "$NNN_FIFO"
    )
    # Preview command
    preview_cmd="/path/to/preview_cmd.sh"
    if [ -e "${TMUX%%,*}" ]; then
        # Use `tmux` split as preview
        tmux split-window -e "NNN_FIFO=$NNN_FIFO" -dh "$preview_cmd"
    elif (which xterm &>/dev/null); then
        # Use `xterm` as a preview window
        xterm -e "$preview_cmd" &
    else
        # Unable to find a program to use as a preview window
        echo "unable to open preview, please install tmux or xterm"
    fi
    nnn "$@"
    rm -f "$NNN_FIFO"
}

lc() {
    tmp="$(mktemp)"
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        if [ -d "$dir" ]; then
            if [ "$dir" != "$PWD" ]; then
                cd "$dir" || exit
            fi
        fi
    fi
}

# File handling
p() {
    # this will open pdf file with the default PDF viewer on KDE, xfce, LXDE and
    # perhaps on other desktops.
    # open=zathura -
    # open=xdg-open
    # shellcheck disable=SC2016
    ag --ignore Dropbox --ignore OneDrive --ignore BoxSync -U -g ".pdf$" |
        fast-p |
        fzf --read0 --reverse -e -d $'\t' \
            --preview-window down:80% --preview '
            v=$(echo {q} | tr " " "|");
            echo -e {1}"\n"{2} | grep -E "^|$v" -i --color=always;
            ' |
        cut -z -f 1 -d $'\t' | tr -d '\n' | xargs -r --null zathura - >/dev/null 2>/dev/null
}

pretty_csv() {
    column -t -s, "$@" | less -F -S -X -K
}

cht() {
    # Look up any command you'd like
    curl cht.sh/"$1"
}

fopen() {
    open "$(locate -i "$1")"
}

rmbd() {
    # Delete everything in current path before <date>
    # Format: YYYY-MM-DD HH:MM:SS
    c=$(find . ! -newermt "$1 $2" -printf '.' | wc -c)
    echo "Are you sure you want to delete ""$c"" files from ""$PWD""?"
    select yn in "Yes" "No"; do
        case "$yn" in
        Yes)
            find . -print0 ! -newermt "$1 $2" | xargs -0 rm -rf
            break
            ;;
        No) break ;;
        esac
    done
}

rmad() {
    # Delete everything in current path after <date>
    # Format: YYYY-MM-DD HH:MM:SS
    c=$(find . -newermt "$1 $2" -printf '.' | wc -c)
    echo "Are you sure you want to delete ""$c"" files from ""$PWD""?"
    select yn in "Yes" "No"; do
        case "$yn" in
        Yes)
            find . -print0 -newermt "$1 $2" | xargs -0 rm -rf
            break
            ;;
        No) break ;;
        esac
    done
}

# Github-related
giit() {
    git clone https://github.com/engeir/"$1".git
}

wgit() {
    wget https://github.com/engeir/"$1"/archive/master.zip && unzip master && rm -rf master.zip
}

git_get() {
    curl -u engeir -L -o delete_me_now https://github.com/engeir/"$1"/archive/master.zip && unzip delete_me_now && rm -rf delete_me_now
}

# ImageMagick
remove_menu() {
    convert "$1" -fill white -draw "rectangle 20,100 100,10" "$1"
}

remove_page() {
    convert "$1" -fill white -draw "rectangle 610,1810 800,1850" "$1"
}

transparent() {
    out=${2:-$1}
    col=${3:-white}
    convert "$1" -transparent "$col" "$out"
}

invert() {
    out=${2:-$1}
    convert "$1" -channel RGB -negate "$out"
}

crop() {
    # Crop image. (Default remove white)
    for file in "$@"; do
        convert -trim "$file" "$file"
    done
}

cropv() {
    # Crop image in the vertical direction.
    # (Default remove white.)
    for file in "$@"; do
        croptop "$file"
        cropbottom "$file"
    done
}

croptop() {
    for file in "$@"; do
        convert "$file" -background white -splice 0x1 -background black -splice 0x1 -trim +repage -chop 0x1 "$file"
    done
}

cropbottom() {
    for file in "$@"; do
        convert "$file" -gravity South -background white -splice 0x1 -background black -splice 0x1 -trim +repage -chop 0x1 "$file"
    done
}

trinv() {
    # Make transparent and invert.
    for file in "$@"; do
        transparent "$file" "$file"
        invert "$file" "$file"
    done
}

my_img_magik() {
    # Remove menu and page number, invert and make transparent.
    for file in "$@"; do
        remove_menu "$file"
        remove_page "$file"
        trinv "$file"
    done
}

# Latex compilers
tex0() {
    pdflatex "$1".tex
    pdflatex "$1".tex
    pdflatex "$1".tex
}

tex_bib() {
    pdflatex "$1".tex
    bibtex "$1"
    pdflatex "$1".tex
    pdflatex "$1".tex
}

tex_gls() {
    pdflatex "$1".tex
    makeglossaries "$1"
    pdflatex "$1".tex
    pdflatex "$1".tex
}

tex_full() {
    pdflatex "$1".tex
    bibtex "$1"
    makeglossaries "$1"
    pdflatex "$1".tex
    pdflatex "$1".tex
}
